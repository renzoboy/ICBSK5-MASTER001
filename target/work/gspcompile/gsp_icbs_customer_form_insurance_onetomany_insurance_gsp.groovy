import org.codehaus.groovy.grails.plugins.metadata.GrailsPlugin
import org.codehaus.groovy.grails.web.pages.GroovyPage
import org.codehaus.groovy.grails.web.taglib.*
import org.codehaus.groovy.grails.web.taglib.exceptions.GrailsTagException
import org.springframework.web.util.*
import grails.util.GrailsUtil

class gsp_icbs_customer_form_insurance_onetomany_insurance_gsp extends GroovyPage {
public String getGroovyPageFileName() { "/WEB-INF/grails-app/views/customer/form/insurance/onetomany/_insurance.gsp" }
public Object run() {
Writer out = getOut()
Writer expressionOut = getExpressionOut()
registerSitemeshPreprocessMode()
printHtmlPart(0)
printHtmlPart(1)
expressionOut.print(i)
printHtmlPart(2)
if(true && (insurance?.id)) {
printHtmlPart(3)
invokeTag('hiddenField','g',9,['name':("insurances[${i}].id"),'value':(insurance?.id)],-1)
printHtmlPart(3)
invokeTag('hiddenField','g',10,['name':("insurances[${i}].new"),'value':("false")],-1)
printHtmlPart(4)
}
else {
printHtmlPart(3)
invokeTag('hiddenField','g',13,['name':("insurances[${i}].new"),'value':("true")],-1)
printHtmlPart(4)
}
printHtmlPart(4)
invokeTag('hiddenField','g',15,['name':("insurances[${i}].deleted"),'value':("false")],-1)
printHtmlPart(5)
expressionOut.print(hasErrors(bean: customerInstance, field: 'insurances['+i+'].lifeInsurance', 'has-error'))
printHtmlPart(6)
expressionOut.print(i)
printHtmlPart(7)
invokeTag('message','g',19,['code':("insurance.lifeInsurance.label"),'default':("Life Insurance")],-1)
printHtmlPart(8)
invokeTag('textField','g',23,['name':("insurances[${i}].lifeInsurance"),'value':(insurance?.lifeInsurance),'class':("form-control")],-1)
printHtmlPart(9)
createTagBody(1, {->
printHtmlPart(10)
createTagBody(2, {->
printHtmlPart(11)
invokeTag('message','g',28,['error':(it)],-1)
printHtmlPart(12)
})
invokeTag('eachError','g',29,['bean':(customerInstance),'field':("insurances[${i}].lifeInsurance")],2)
printHtmlPart(13)
})
invokeTag('hasErrors','g',32,['bean':(customerInstance),'field':("insurances[${i}].lifeInsurance")],1)
printHtmlPart(14)
expressionOut.print(hasErrors(bean: customerInstance, field: 'insurances['+i+'].lifeDateOfRemittance', 'has-error'))
printHtmlPart(6)
expressionOut.print(i)
printHtmlPart(15)
invokeTag('message','g',37,['code':("insurance.lifeDateOfRemittance.label"),'default':("Date of Remittance")],-1)
printHtmlPart(16)
invokeTag('customDatePicker','g',40,['name':("insurances[${i}].lifeDateOfRemittance"),'precision':("day"),'value':(insurance?.lifeDateOfRemittance),'default':("none"),'noSelection':(['': '']),'class':("form-control")],-1)
printHtmlPart(9)
createTagBody(1, {->
printHtmlPart(10)
createTagBody(2, {->
printHtmlPart(11)
invokeTag('message','g',45,['error':(it)],-1)
printHtmlPart(12)
})
invokeTag('eachError','g',46,['bean':(customerInstance),'field':("insurances[${i}].lifeDateOfRemittance")],2)
printHtmlPart(13)
})
invokeTag('hasErrors','g',49,['bean':(customerInstance),'field':("insurances[${i}].lifeDateOfRemittance")],1)
printHtmlPart(17)
expressionOut.print(hasErrors(bean: customerInstance, field: 'insurances['+i+'].pcic', 'has-error'))
printHtmlPart(6)
expressionOut.print(i)
printHtmlPart(18)
invokeTag('message','g',56,['code':("insurance.pcic.label"),'default':("PCIC")],-1)
printHtmlPart(8)
invokeTag('textField','g',60,['name':("insurances[${i}].pcic"),'value':(insurance?.pcic),'class':("form-control")],-1)
printHtmlPart(9)
createTagBody(1, {->
printHtmlPart(10)
createTagBody(2, {->
printHtmlPart(11)
invokeTag('message','g',65,['error':(it)],-1)
printHtmlPart(12)
})
invokeTag('eachError','g',66,['bean':(customerInstance),'field':("insurances[${i}].pcic")],2)
printHtmlPart(13)
})
invokeTag('hasErrors','g',69,['bean':(customerInstance),'field':("insurances[${i}].pcic")],1)
printHtmlPart(14)
expressionOut.print(hasErrors(bean: customerInstance, field: 'insurances['+i+'].pcicDateOfRemittance', 'has-error'))
printHtmlPart(6)
expressionOut.print(i)
printHtmlPart(19)
invokeTag('message','g',74,['code':("insurance.pcicDateOfRemittance.label"),'default':("Date of Remittance")],-1)
printHtmlPart(16)
invokeTag('customDatePicker','g',77,['name':("insurances[${i}].pcicDateOfRemittance"),'precision':("day"),'value':(insurance?.pcicDateOfRemittance),'default':("none"),'noSelection':(['': '']),'class':("form-control")],-1)
printHtmlPart(9)
createTagBody(1, {->
printHtmlPart(10)
createTagBody(2, {->
printHtmlPart(11)
invokeTag('message','g',82,['error':(it)],-1)
printHtmlPart(12)
})
invokeTag('eachError','g',83,['bean':(customerInstance),'field':("insurances[${i}].pcicDateOfRemittance")],2)
printHtmlPart(13)
})
invokeTag('hasErrors','g',86,['bean':(customerInstance),'field':("insurances[${i}].pcicDateOfRemittance")],1)
printHtmlPart(20)
expressionOut.print(hasErrors(bean: customerInstance, field: 'insurances['+i+'].memBenefitProgram', 'has-error'))
printHtmlPart(6)
expressionOut.print(i)
printHtmlPart(21)
invokeTag('message','g',93,['code':("insurance.memBenefitProgram.label"),'default':("Member's Benefit Program")],-1)
printHtmlPart(8)
invokeTag('textField','g',97,['name':("insurances[${i}].memBenefitProgram"),'value':(insurance?.memBenefitProgram),'class':("form-control")],-1)
printHtmlPart(9)
createTagBody(1, {->
printHtmlPart(10)
createTagBody(2, {->
printHtmlPart(11)
invokeTag('message','g',102,['error':(it)],-1)
printHtmlPart(12)
})
invokeTag('eachError','g',103,['bean':(customerInstance),'field':("insurances[${i}].memBenefitProgram")],2)
printHtmlPart(13)
})
invokeTag('hasErrors','g',106,['bean':(customerInstance),'field':("insurances[${i}].memBenefitProgram")],1)
printHtmlPart(14)
expressionOut.print(hasErrors(bean: customerInstance, field: 'insurances['+i+'].memDateOfRemittance', 'has-error'))
printHtmlPart(6)
expressionOut.print(i)
printHtmlPart(22)
invokeTag('message','g',111,['code':("insurance.memDateOfRemittance.label"),'default':("Date of Remittance")],-1)
printHtmlPart(16)
invokeTag('customDatePicker','g',114,['name':("insurances[${i}].memDateOfRemittance"),'precision':("day"),'value':(insurance?.memDateOfRemittance),'default':("none"),'noSelection':(['': '']),'class':("form-control")],-1)
printHtmlPart(9)
createTagBody(1, {->
printHtmlPart(10)
createTagBody(2, {->
printHtmlPart(11)
invokeTag('message','g',119,['error':(it)],-1)
printHtmlPart(12)
})
invokeTag('eachError','g',120,['bean':(customerInstance),'field':("insurances[${i}].memDateOfRemittance")],2)
printHtmlPart(13)
})
invokeTag('hasErrors','g',123,['bean':(customerInstance),'field':("insurances[${i}].memDateOfRemittance")],1)
printHtmlPart(17)
expressionOut.print(hasErrors(bean: customerInstance, field: 'insurances['+i+'].agfp', 'has-error'))
printHtmlPart(6)
expressionOut.print(i)
printHtmlPart(23)
invokeTag('message','g',130,['code':("insurance.agfp.label"),'default':("AGFP")],-1)
printHtmlPart(8)
invokeTag('textField','g',134,['name':("insurances[${i}].agfp"),'value':(insurance?.agfp),'class':("form-control")],-1)
printHtmlPart(9)
createTagBody(1, {->
printHtmlPart(10)
createTagBody(2, {->
printHtmlPart(11)
invokeTag('message','g',139,['error':(it)],-1)
printHtmlPart(12)
})
invokeTag('eachError','g',140,['bean':(customerInstance),'field':("insurances[${i}].agfp")],2)
printHtmlPart(13)
})
invokeTag('hasErrors','g',143,['bean':(customerInstance),'field':("insurances[${i}].agfp")],1)
printHtmlPart(14)
expressionOut.print(hasErrors(bean: customerInstance, field: 'insurances['+i+'].agfpDateOfRemitance', 'has-error'))
printHtmlPart(6)
expressionOut.print(i)
printHtmlPart(24)
invokeTag('message','g',148,['code':("insurance.agfpDateOfRemitance.label"),'default':("Date of Remittance")],-1)
printHtmlPart(16)
invokeTag('customDatePicker','g',151,['name':("insurances[${i}].agfpDateOfRemitance"),'precision':("day"),'value':(insurance?.agfpDateOfRemitance),'default':("none"),'noSelection':(['': '']),'class':("form-control")],-1)
printHtmlPart(9)
createTagBody(1, {->
printHtmlPart(10)
createTagBody(2, {->
printHtmlPart(11)
invokeTag('message','g',156,['error':(it)],-1)
printHtmlPart(12)
})
invokeTag('eachError','g',157,['bean':(customerInstance),'field':("insurances[${i}].agfpDateOfRemitance")],2)
printHtmlPart(13)
})
invokeTag('hasErrors','g',160,['bean':(customerInstance),'field':("insurances[${i}].agfpDateOfRemitance")],1)
printHtmlPart(17)
expressionOut.print(hasErrors(bean: customerInstance, field: 'insurances['+i+'].fireInsurance', 'has-error'))
printHtmlPart(6)
expressionOut.print(i)
printHtmlPart(25)
invokeTag('message','g',167,['code':("insurance.fireInsurance.label"),'default':("Fire Insurance")],-1)
printHtmlPart(8)
invokeTag('textField','g',171,['name':("insurances[${i}].fireInsurance"),'value':(insurance?.fireInsurance),'class':("form-control")],-1)
printHtmlPart(9)
createTagBody(1, {->
printHtmlPart(10)
createTagBody(2, {->
printHtmlPart(11)
invokeTag('message','g',176,['error':(it)],-1)
printHtmlPart(12)
})
invokeTag('eachError','g',177,['bean':(customerInstance),'field':("insurances[${i}].fireInsurance")],2)
printHtmlPart(13)
})
invokeTag('hasErrors','g',180,['bean':(customerInstance),'field':("insurances[${i}].fireInsurance")],1)
printHtmlPart(14)
expressionOut.print(hasErrors(bean: customerInstance, field: 'insurances['+i+'].fireDateOfRemittance', 'has-error'))
printHtmlPart(6)
expressionOut.print(i)
printHtmlPart(26)
invokeTag('message','g',185,['code':("insurance.fireDateOfRemittance.label"),'default':("Date of Remittance")],-1)
printHtmlPart(16)
invokeTag('customDatePicker','g',188,['name':("insurances[${i}].fireDateOfRemittance"),'precision':("day"),'value':(insurance?.fireDateOfRemittance),'default':("none"),'noSelection':(['': '']),'class':("form-control")],-1)
printHtmlPart(9)
createTagBody(1, {->
printHtmlPart(10)
createTagBody(2, {->
printHtmlPart(11)
invokeTag('message','g',193,['error':(it)],-1)
printHtmlPart(12)
})
invokeTag('eachError','g',194,['bean':(customerInstance),'field':("insurances[${i}].fireDateOfRemittance")],2)
printHtmlPart(13)
})
invokeTag('hasErrors','g',197,['bean':(customerInstance),'field':("insurances[${i}].fireDateOfRemittance")],1)
printHtmlPart(27)
if(true && (i!=0)) {
printHtmlPart(28)
}
printHtmlPart(29)
}
public static final Map JSP_TAGS = new HashMap()
protected void init() {
	this.jspTags = JSP_TAGS
}
public static final String CONTENT_TYPE = 'text/html;charset=UTF-8'
public static final long LAST_MODIFIED = 1592209176000L
public static final String EXPRESSION_CODEC = 'html'
public static final String STATIC_CODEC = 'none'
public static final String OUT_CODEC = 'html'
public static final String TAGLIB_CODEC = 'none'
}
